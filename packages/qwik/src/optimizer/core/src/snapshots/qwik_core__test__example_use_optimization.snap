---
source: packages/qwik/src/optimizer/core/src/test.rs
expression: output
---
==INPUT==


import { $, component$, useTask$ } from '@builder.io/qwik';
import { CONST } from 'const';
export const Works = component$((props) => {
    const {value} = useSignal(0);
    const {foo, ...rest} = useStore({foo: 0});
    const {bar = 'hello', ...rest2} = useStore({foo: 0});
    const {hello} = props;

    return (
        <div hello={hello} some={value} bar={bar} rest={rest} rest2={rest2}>{foo}</div>
    );
});

============================= test.js ==

import { _restProps } from "@builder.io/qwik";
import { componentQrl } from "@builder.io/qwik";
import { _wrapProp } from "@builder.io/qwik";
import { _fnSignal } from "@builder.io/qwik";
import { _wrapSignal } from "@builder.io/qwik";
import { inlinedQrl } from "@builder.io/qwik";
import { jsx as _jsx } from "@builder.io/qwik/jsx-runtime";
export const Works = /*#__PURE__*/ componentQrl(/*#__PURE__*/ inlinedQrl((props)=>{
    const signal = useSignal(0);
    const store = useStore({
        foo: 0
    });
    const rest = _restProps(store, [
        "foo"
    ]);
    const store1 = useStore({
        foo: 0
    });
    const rest2 = _restProps(store1, [
        "bar"
    ]);
    const props1 = props;
    return /*#__PURE__*/ _jsx("div", {
        hello: _wrapProp(props1, "hello"),
        some: _wrapProp(signal, "value"),
        bar: _fnSignal((p0)=>p0.bar ?? 'hello', [
            store1
        ], 'p0.bar??"hello"'),
        rest: rest,
        rest2: rest2,
        children: _wrapSignal(store, "foo")
    }, "u6_0");
}, "Works_component_t45qL4vNGv0"));


Some("{\"version\":3,\"sources\":[\"/user/qwik/src/test.tsx\"],\"names\":[],\"mappings\":\"AACA;;;;;;;AAEA,OAAO,MAAM,sBAAQ,sCAAW,CAAC,QAAU;IACvC,MAAM,SAAU,UAAU;IAC1B,MAAM,QAAiB,SAAS;QAAC,KAAK;IAAC;;;;IACvC,MAAM,SAA4B,SAAS;QAAC,KAAK;IAAC;;;;IAClD,MAAM,SAAU;IAEhB,qBACI,KAAC;QAAI,KAAK;QAAS,IAAI;QAAS,GAAG,qBAJhC,OAAM;;;QAIiC,MAAM;QAAM,OAAO;;;AAErE,mCAAG\"}")
== DIAGNOSTICS ==

[]
