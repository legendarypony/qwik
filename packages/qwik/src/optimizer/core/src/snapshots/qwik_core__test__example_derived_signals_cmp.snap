---
source: packages/qwik/src/optimizer/core/src/test.rs
expression: output
---
==INPUT==


import { component$, useStore, mutable } from '@builder.io/qwik';

import {dep} from './file';
import {Cmp} from './cmp';

export const App = component$(() => {
    const signal = useSignal(0);
    const store = useStore({});
    return (
        <Cmp
            staticText="text"
            staticText2={`text`}
            staticNumber={1}
            staticBoolean={true}
            staticExpr={`text${12}`}
            staticExpr2={typeof `text${12}` === 'string' ? 12 : 43}

            signal={signal}
            signalValue={signal.value}
            signalComputedValue={12 + signal.value}

            store={store.address.city.name}
            storeComputed={store.address.city.name ? 'true' : 'false'}

            dep={dep}
            depAccess={dep.thing}
            depComputed={dep.thing + 'stuff'}

            global={globalThing}
            globalAccess={globalThing.thing}
            globalComputed={globalThing.thing + 'stuff'}


            noInline={signal.value()}
            noInline2={signal.value + unknown()}
            noInline3={mutable(signal)}
            noInline4={signal.value + dep}
        />
    );
});

============================= test.js ==

import { componentQrl } from "@builder.io/qwik";
import { _IMMUTABLE } from "@builder.io/qwik";
import { _wrapProp } from "@builder.io/qwik";
import { _fnSignal } from "@builder.io/qwik";
import { inlinedQrl } from "@builder.io/qwik";
import { jsx as _jsx } from "@builder.io/qwik/jsx-runtime";
import { useStore, mutable } from '@builder.io/qwik';
import { dep } from './file';
import { Cmp } from './cmp';
const App_component_ckEPmXZlub0 = ()=>{
    const signal = useSignal(0);
    const store = useStore({});
    return /*#__PURE__*/ _jsx(Cmp, {
        staticText: "text",
        staticText2: `text`,
        staticNumber: 1,
        staticBoolean: true,
        staticExpr: `text${12}`,
        staticExpr2: typeof `text${12}` === 'string' ? 12 : 43,
        signal: signal,
        get signalValue () {
            return signal.value;
        },
        get signalComputedValue () {
            return 12 + signal.value;
        },
        get store () {
            return store.address.city.name;
        },
        get storeComputed () {
            return store.address.city.name ? 'true' : 'false';
        },
        dep: dep,
        get depAccess () {
            return dep.thing;
        },
        depComputed: dep.thing + 'stuff',
        global: globalThing,
        get globalAccess () {
            return globalThing.thing;
        },
        globalComputed: globalThing.thing + 'stuff',
        get noInline () {
            return signal.value();
        },
        get noInline2 () {
            return signal.value + unknown();
        },
        noInline3: mutable(signal),
        noInline4: signal.value + dep,
        [_IMMUTABLE]: {
            staticText: _IMMUTABLE,
            staticText2: _IMMUTABLE,
            staticNumber: _IMMUTABLE,
            staticBoolean: _IMMUTABLE,
            staticExpr: _IMMUTABLE,
            staticExpr2: _IMMUTABLE,
            signal: _IMMUTABLE,
            signalValue: _wrapProp(signal, "value"),
            signalComputedValue: _fnSignal((p0)=>12 + p0.value, [
                signal
            ], "12+p0.value"),
            store: _wrapProp(store.address.city, "name"),
            storeComputed: _fnSignal((p0)=>p0.address.city.name ? 'true' : 'false', [
                store
            ], 'p0.address.city.name?"true":"false"'),
            dep: _IMMUTABLE,
            depAccess: _wrapProp(dep, "thing"),
            globalAccess: _wrapProp(globalThing, "thing"),
            noInline: _fnSignal((p0)=>p0.value(), [
                signal
            ], "p0.value()"),
            noInline2: _fnSignal((p0)=>p0.value + unknown(), [
                signal
            ], "p0.value+unknown()")
        }
    }, "u6_0");
};
export const App = /*#__PURE__*/ componentQrl(/*#__PURE__*/ inlinedQrl(App_component_ckEPmXZlub0, "App_component_ckEPmXZlub0"));


Some("{\"version\":3,\"sources\":[\"/user/qwik/src/test.tsx\"],\"names\":[],\"mappings\":\"AACA;;;;;;AAAA,SAAqB,QAAQ,EAAE,OAAO,QAAQ,mBAAmB;AAEjE,SAAQ,GAAG,QAAO,SAAS;AAC3B,SAAQ,GAAG,QAAO,QAAQ;kCAEI,IAAM;IAChC,MAAM,SAAS,UAAU;IACzB,MAAM,QAAQ,SAAS,CAAC;IACxB,qBACI,KAAC;QACG,YAAW;QACX,aAAa,CAAC,IAAI,CAAC;QACnB,cAAc;QACd,eAAe,IAAI;QACnB,YAAY,CAAC,IAAI,EAAE,GAAG,CAAC;QACvB,aAAa,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,WAAW,KAAK,EAAE;QAEtD,QAAQ;YACR;mBAAa,OAAO,KAAK;;YACzB;mBAAqB,KAAK,OAAO,KAAK;;YAEtC;mBAAO,MAAM,OAAO,CAAC,IAAI,CAAC,IAAI;;YAC9B;mBAAe,MAAM,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,OAAO;;QAEzD,KAAK;YACL;mBAAW,IAAI,KAAK;;QACpB,aAAa,IAAI,KAAK,GAAG;QAEzB,QAAQ;YACR;mBAAc,YAAY,KAAK;;QAC/B,gBAAgB,YAAY,KAAK,GAAG;YAGpC;mBAAU,OAAO,KAAK;;YACtB;mBAAW,OAAO,KAAK,GAAG;;QAC1B,WAAW,QAAQ;QACnB,WAAW,OAAO,KAAK,GAAG;;YA1B1B,UAAU;YACV,WAAW;YACX,YAAY;YACZ,aAAa;YACb,UAAU;YACV,WAAW;YAEX,MAAM;YACN,WAAW,YAAE;YACb,mBAAmB,kBAAE,KAAK,GAAO,KAAK;;;YAEtC,KAAK,YAAE,MAAM,OAAO,CAAC,IAAI;YACzB,aAAa,kBAAE,GAAM,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,OAAO;;;YAEzD,GAAG;YACH,SAAS,YAAE;YAIX,YAAY,YAAE;YAId,QAAQ,kBAAE,GAAO,KAAK;;;YACtB,SAAS,kBAAE,GAAO,KAAK,GAAG;;;;;AAKtC;AAlCA,OAAO,MAAM,oBAAM,+FAkChB\"}")
== DIAGNOSTICS ==

[]
