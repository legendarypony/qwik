load("@build_bazel_rules_nodejs//:index.bzl", "pkg_npm")
load("@npm//@bazel/esbuild:index.bzl", "esbuild")
load("@npm//@bazel/terser:index.bzl", "terser_minified")
load("@npm//@bazel/typescript:index.bzl", "ts_project")
load("@npm//@microsoft/api-extractor:index.bzl", "api_extractor")

package(default_visibility = ["//visibility:public"])

pkg_npm(
    name = "pkg",
    srcs = [
        ":package.json",
    ],
    substitutions = {"//internal/": "//"},
    deps = [
        ":LICENSE",
        ":README.md",
        ":core.cjs",
        ":core.d.ts",
        ":core.js",
        ":qwikloader",
        ":qwikloader.min",
    ],
)

esbuild(
    name = "core_js",
    entry_point = "//src/core:index.ts",
    format = "esm",
    output = "core.js",
    target = "es2017",
    tool = select({
        "@bazel_tools//src/conditions:darwin": "@esbuild_darwin//:bin/esbuild",
        "@bazel_tools//src/conditions:linux_x86_64": "@esbuild_linux//:bin/esbuild",
        "@bazel_tools//src/conditions:windows": "@esbuild_windows//:esbuild.exe",
    }),
    deps = [
        "//src/core",
    ],
)

esbuild(
    name = "core_cjs",
    entry_point = "//src/core:index.ts",
    format = "cjs",
    output = "core.cjs",
    target = "es2017",
    tool = select({
        "@bazel_tools//src/conditions:darwin": "@esbuild_darwin//:bin/esbuild",
        "@bazel_tools//src/conditions:linux_x86_64": "@esbuild_linux//:bin/esbuild",
        "@bazel_tools//src/conditions:windows": "@esbuild_windows//:esbuild.exe",
    }),
    deps = [
        "//src/core",
    ],
)

api_extractor(
    name = "public_api_extractor",
    outs = [
        "core.d.ts",
        ":core.api.md",
    ],
    args = [
        "run",
        "--verbose",
        "--local",
        "--config",
        "src/api-extractor-$(TARGET_CPU).json",
    ],
    data = [
        "//:package.json",
        "//:tsconfig.base.json",
        "//:tsconfig.bazel.json",
        "//src:api-extractor.json",
        "//src:api-extractor-darwin.json",
        "//src:api-extractor-k8.json",
        "//src/core:project",
    ],
)

ts_project(
    name = "qwikloader",
    srcs = ["qwikloader.ts"],
    declaration = True,
    tsconfig = "//:tsconfig",
)

terser_minified(
    name = "qwikloader.min",
    src = "qwikloader.js",
    config_file = "//:terser.config.json",
    sourcemap = False,
    terser_bin = "@npm//terser/bin:terser",
)

genrule(
    name = "LICENSE.copy",
    srcs = ["//:LICENSE"],
    outs = ["LICENSE"],
    cmd = "cp $< $@",
    output_to_bindir = 1,
)

genrule(
    name = "README.copy",
    srcs = ["//:README.md"],
    outs = ["README.md"],
    cmd = "cp $< $@",
    output_to_bindir = 1,
)
