---
source: src/optimizer/core/src/test.rs
expression: output
---
==INPUT==


import { $, component$, useStore } from '@builder.io/qwik';
export const useCounter = () => {
    return useStore({count: 0});
}

export const STEP = 1;

export const App = component$((props) => {
    const state = useCounter();
    const thing = useStore({thing: 0});
    const STEP_2 = 2;

    return $(() => {
        const count2 = state.count * 2;
        return (
            <div onClick$={() => state.count+=count2 }>
                <span>{state.count}</span>
                {buttons.map(btn => (
                    <button
                        onClick$={() => state.count += btn.offset + thing + STEP + STEP_2 + props.step}
                    >
                        {btn.name}
                    </button>
                ))}

            </div>

        )
    });
})

============================= test.js ==

import * as qwik from "@builder.io/qwik";
import { componentQrl } from "@builder.io/qwik";
import { useStore } from '@builder.io/qwik';
export const useCounter = ()=>{
    return useStore({
        count: 0
    });
};
export const STEP = 1;
export const App = /*#__PURE__*/ componentQrl(qwik.qrl(()=>import("./h_test_app_render")
, "App_render"));

============================= h_test_app_onrender_div_onclick.js (ENTRY POINT)==

import * as qwik from "@builder.io/qwik";
export const App_onRender_div_onClick = ()=>{
    const [count2, state] = qwik.useLexicalScope();
    return state.count += count2;
};

/*
{
  "origin": "test.tsx",
  "name": "App_onRender_div_onClick",
  "entry": null,
  "canonicalFilename": "h_test_app_onrender_div_onclick",
  "extension": "js"
}
*/
============================= h_test_app_onrender_button_onclick.js (ENTRY POINT)==

import * as qwik from "@builder.io/qwik";
import { STEP } from "./test";
export const App_onRender_button_onClick = ()=>{
    const [STEP_2, btn, props, state, thing] = qwik.useLexicalScope();
    return state.count += btn.offset + thing + STEP + STEP_2 + props.step;
};

/*
{
  "origin": "test.tsx",
  "name": "App_onRender_button_onClick",
  "entry": null,
  "canonicalFilename": "h_test_app_onrender_button_onclick",
  "extension": "js"
}
*/
============================= h_test_app_onrender.js (ENTRY POINT)==

import { jsx as _jsx, jsxs as _jsxs } from "@builder.io/qwik/jsx-runtime";
import * as qwik from "@builder.io/qwik";
export const App_onRender = ()=>{
    const [STEP_2, props, state, thing] = qwik.useLexicalScope();
    const count2 = state.count * 2;
    return /*#__PURE__*/ _jsxs("div", {
        onClickQrl: qwik.qrl(()=>import("./h_test_app_onrender_div_onclick")
        , "App_onRender_div_onClick", [
            count2,
            state
        ]),
        children: [
            /*#__PURE__*/ _jsx("span", {
                children: state.count
            }),
            buttons.map((btn)=>/*#__PURE__*/ _jsx("button", {
                    onClickQrl: qwik.qrl(()=>import("./h_test_app_onrender_button_onclick")
                    , "App_onRender_button_onClick", [
                        STEP_2,
                        btn,
                        props,
                        state,
                        thing
                    ]),
                    children: btn.name
                })
            )
        ]
    });
};

/*
{
  "origin": "test.tsx",
  "name": "App_onRender",
  "entry": null,
  "canonicalFilename": "h_test_app_onrender",
  "extension": "js"
}
*/
============================= h_test_app_render.js (ENTRY POINT)==

import * as qwik from "@builder.io/qwik";
import { useCounter } from "./test";
import { useStore } from "@builder.io/qwik";
export const App_render = (props)=>{
    const state = useCounter();
    const thing = useStore({
        thing: 0
    });
    const STEP_2 = 2;
    return qwik.qrl(()=>import("./h_test_app_onrender")
    , "App_onRender", [
        STEP_2,
        props,
        state,
        thing
    ]);
};

/*
{
  "origin": "test.tsx",
  "name": "App_render",
  "entry": null,
  "canonicalFilename": "h_test_app_render",
  "extension": "js"
}
*/
== DIAGNOSTICS ==

[]
